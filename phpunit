#!/usr/bin/env php
<?php declare(strict_types=1);
/*
 * This file is part of PHPUnit.
 *
 * (c) Sebastian Bergmann <sebastian@phpunit.de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

if (version_compare('7.2.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        sprintf(
            'This version of PHPUnit is supported on PHP 7.2 and PHP 7.3.' . PHP_EOL .
            'You are using PHP %s (%s).' . PHP_EOL,
            PHP_VERSION,
            PHP_BINARY
        )
    );

    die(1);
}

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

foreach (array(__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        define('PHPUNIT_COMPOSER_INSTALL', $file);

        break;
    }
}

unset($file);

if (!defined('PHPUNIT_COMPOSER_INSTALL')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
        '    composer install' . PHP_EOL . PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . PHP_EOL
    );

    die(1);
}

$options = getopt('', array('prepend:'));

if (isset($options['prepend'])) {
    require $options['prepend'];
}

unset($options);

require PHPUNIT_COMPOSER_INSTALL;

$resultPrinter = static function ($results): void {
    foreach ($results as $file => $result) {
        if (\strpos($file, 'Assert.php') === false) {
            continue;
        }

        if (\array_key_exists('functions', $result)) {
            \printf('Found %d functions in file %s', \count($result['functions']), $file);
        } else {
            \printf('Found no function coverage in file %s', $file);
        }

        print PHP_EOL;
    }

    print PHP_EOL . PHP_EOL;
};

\xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE | XDEBUG_CC_BRANCH_CHECK);
\PHPUnit\Framework\Assert::assertEquals('Path 6', 'Path 6');
$results = \xdebug_get_code_coverage();
$resultPrinter($results);
\xdebug_stop_code_coverage(1);

PHPUnit\TextUI\Command::main(false);

\xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE | XDEBUG_CC_BRANCH_CHECK);
\PHPUnit\Framework\Assert::assertEquals('Path 6', 'Path 6');
$results = \xdebug_get_code_coverage();
\xdebug_stop_code_coverage(1);
$resultPrinter($results);
unset($results);

\xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE | XDEBUG_CC_BRANCH_CHECK);
\PHPUnit\Framework\Assert::assertEquals('Path 6', 'Path 6');
$results = \xdebug_get_code_coverage();
$resultPrinter($results);
\xdebug_stop_code_coverage();
